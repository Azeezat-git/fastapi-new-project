name: Build and Deploy code

on: [push, pull_request]

jobs:
    build:
        environment:
            name: testing
        env: 
            DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
            DATABASE_PORT: ${{secrets.DATABASE_PORT}}
            DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
            DATABASE_NAME: ${{secrets.DATABASE_NAME}}
            DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
        services:
            postgres:
                image: postgres
                env: 
                    POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
                    POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
                ports:
                 - 5432:5432
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
        runs-on: ubuntu-latest
        steps:
            - name: pulling git repo
              uses: actions/checkout@v3
            - name: Install python 3.9
              uses: actions/setup-python@v2
              with:
                python-version: '3.9'
            - name: update pip
              run: python -m pip install --upgrade pip
            - name: installing our dependencies
              run: pip install -r requirements.txt
            
            # - name: Login to Docker Hub
            #   uses: docker/login-action@v2
            #   with:
            #     username: ${{ secrets.DOCKERHUB_USERNAME }}
            #     password: ${{ secrets.DOCKERHUB_TOKEN }}
           
            # - name: Set up Docker Buildx
            #   uses: docker/setup-buildx-action@v2

            # - name: Build and push
            #   uses: docker/build-push-action@v4
            #   with:
            #    context: .
            #    file: ./Dockerfile
            #    push: true
            #    tags: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-new:latest

    deploy: 
        runs-on: ubuntu-latest
        needs: [build]       
        environment:
            name: production
        steps: 
            - name: deploying to ubuntu server
              uses: appleboy/ssh-action@v1.0.0
              with: 
                host: ${{secrets.PROD_HOST}}
                username: ${{secrets.PROD_USERNAME}}
                password: ${{secrets.PROD_PASSWORD}}
                script: |
                   cd app/src
                   git pull
                   echo  ${{secrets.PROD_PASSWORD}} | sudo -S systemctl restart gunicorn